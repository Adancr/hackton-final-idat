{"remainingRequest":"D:\\proyectos\\hackaton-final\\node_modules\\babel-loader\\lib\\index.js!D:\\proyectos\\hackaton-final\\src\\views\\auth\\store\\actions.js","dependencies":[{"path":"D:\\proyectos\\hackaton-final\\src\\views\\auth\\store\\actions.js","mtime":1588745798771},{"path":"D:\\proyectos\\hackaton-final\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyectos\\hackaton-final\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgeyBTVUNDRVNTX1JFR0lTVEVSLCBTRVRfTE9HSU4sIFNFVF9VU0VSIH0gZnJvbSAnLi9tdXRhdGlvbnMtdHlwZSc7CnZhciBBQ1RJT05TID0gewogIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcihfcmVmLCBwYXlsb2FkKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL3VzZXJzJywgewogICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCksCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGNvbW1pdChTVUNDRVNTX1JFR0lTVEVSLCB0cnVlKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGNvbW1pdChTVUNDRVNTX1JFR0lTVEVSLCBmYWxzZSk7CiAgICB9KTsKICB9LAogIGxvZ2luOiBmdW5jdGlvbiBsb2dpbihfcmVmMiwgcGF5bG9hZCkgewogICAgdmFyIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgIGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnMnKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwogICAgfSkudGhlbihmdW5jdGlvbiAodXNlcnMpIHsKICAgICAgLyogZXNsaW50LWRpc2FibGUgKi8KICAgICAgdmFyIHVzZXIgPSB1c2Vycy5maW5kKGZ1bmN0aW9uICh1c2VyKSB7CiAgICAgICAgcmV0dXJuIHVzZXIudXNlcm5hbWUgPT09IHBheWxvYWQudXNlcm5hbWUgJiYgdXNlci5wYXNzd29yZCA9PT0gcGF5bG9hZC5wYXNzd29yZDsKICAgICAgfSk7CgogICAgICBpZiAodXNlcikgewogICAgICAgIGNvbW1pdChTRVRfVVNFUiwgdXNlcik7CiAgICAgICAgY29tbWl0KFNFVF9MT0dJTiwgdHJ1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29tbWl0KFNFVF9MT0dJTiwgZmFsc2UpOwogICAgICB9CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBjb21taXQoU0VUX0xPR0lOLCBmYWxzZSk7CiAgICB9KTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IEFDVElPTlM7"},{"version":3,"sources":["D:/proyectos/hackaton-final/src/views/auth/store/actions.js"],"names":["SUCCESS_REGISTER","SET_LOGIN","SET_USER","ACTIONS","register","payload","commit","fetch","method","body","JSON","stringify","headers","then","response","json","catch","login","users","user","find","username","password"],"mappings":";;AAAA,SAASA,gBAAT,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,kBAAtD;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,QADc,0BACOC,OADP,EACgB;AAAA,QAAnBC,MAAmB,QAAnBA,MAAmB;AAC5BC,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAF6B;AAGnCO,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAH0B,KAAhC,CAAL,CAOGC,IAPH,CAOQ,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KAPR,EAQGF,IARH,CAQQ;AAAA,aAAMP,MAAM,CAACN,gBAAD,EAAmB,IAAnB,CAAZ;AAAA,KARR,EASGgB,KATH,CASS;AAAA,aAAMV,MAAM,CAACN,gBAAD,EAAmB,KAAnB,CAAZ;AAAA,KATT;AAUD,GAZa;AAadiB,EAAAA,KAbc,wBAaIZ,OAbJ,EAaa;AAAA,QAAnBC,MAAmB,SAAnBA,MAAmB;AACzBC,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACGM,IADH,CACQ,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACK,KAAD,EAAW;AACf;AACA,UAAMC,IAAI,GAAGD,KAAK,CAACE,IAAN,CACX,UAACD,IAAD;AAAA,eAAUA,IAAI,CAACE,QAAL,KAAkBhB,OAAO,CAACgB,QAA1B,IAAsCF,IAAI,CAACG,QAAL,KAAkBjB,OAAO,CAACiB,QAA1E;AAAA,OADW,CAAb;;AAGA,UAAIH,IAAJ,EAAU;AACRb,QAAAA,MAAM,CAACJ,QAAD,EAAWiB,IAAX,CAAN;AACAb,QAAAA,MAAM,CAACL,SAAD,EAAY,IAAZ,CAAN;AACD,OAHD,MAGO;AACLK,QAAAA,MAAM,CAACL,SAAD,EAAY,KAAZ,CAAN;AACD;AACF,KAbH,EAcGe,KAdH,CAcS;AAAA,aAAMV,MAAM,CAACL,SAAD,EAAY,KAAZ,CAAZ;AAAA,KAdT;AAeD;AA7Ba,CAAhB;AAgCA,eAAeE,OAAf","sourcesContent":["import { SUCCESS_REGISTER, SET_LOGIN, SET_USER } from './mutations-type';\r\n\r\nconst ACTIONS = {\r\n  register({ commit }, payload) {\r\n    fetch('http://localhost:3000/users', {\r\n      method: 'POST',\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        'Content-type': 'application/json; charset=UTF-8',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then(() => commit(SUCCESS_REGISTER, true))\r\n      .catch(() => commit(SUCCESS_REGISTER, false));\r\n  },\r\n  login({ commit }, payload) {\r\n    fetch('http://localhost:3000/users')\r\n      .then((response) => response.json())\r\n      .then((users) => {\r\n        /* eslint-disable */\r\n        const user = users.find( \r\n          (user) => user.username === payload.username && user.password === payload.password\r\n        );\r\n        if (user) {\r\n          commit(SET_USER, user);\r\n          commit(SET_LOGIN, true);\r\n        } else {\r\n          commit(SET_LOGIN, false);\r\n        }\r\n      })\r\n      .catch(() => commit(SET_LOGIN, false));\r\n  },\r\n};\r\n\r\nexport default ACTIONS;"]}]}